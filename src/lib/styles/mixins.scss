@use "src/module/color";
@use "@gouvfr/dsfr/src/dsfr/core/index" as *;

/// Ajoute un style d'outline personnalisé lors du focus clavier (`:focus-visible`).
@mixin set-focus() {
  outline: {
    color: #0a76f6;
    offset: 2px;
    style: solid;
    width: 2px;
  }
}

/// Réinitialise le style de base d'un bouton pour supprimer les styles par défaut du navigateur.
@mixin reset-bouton() {
  background-color: transparent;
  font-family: inherit;
  appearance: none;
  cursor: pointer;
}

/// Ajoute un style `display` au composant hôte dans le Shadow DOM.
/// Permet également d'injecter du contenu CSS supplémentaire via `@content`.
///
/// @param {String} $display [block] - La valeur de la propriété CSS `display` à appliquer au `:host`.
/// @content - Contenu CSS additionnel à insérer dans le bloc `:host`.
///
@mixin set-shadow-host($display: "block") {
  :host {
    display: #{$display};
    @include text-adjustments();
    @include text-style(md);
    @include color.background(
      default grey,
      (
        legacy: false,
      )
    );
    @include color.text(
      default grey,
      (
        legacy: false,
      )
    );

    @content;
  }
}

/// Applique `box-sizing: border-box` au composant spécifié et à tous ses descendants.
///
/// @param {String} $component - Le nom du composant à cibler (utilisé dans la classe `.fr-#{$component}`).
/// @content Permet d'injecter du contenu additionnel à l'intérieur du bloc du composant.
///
@mixin set-dsfr-sizing($component) {
  .fr-#{$component} {
    box-sizing: border-box;

    @content;
  }
}
